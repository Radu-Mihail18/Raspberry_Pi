import sys
import mariadb
import bcrypt
from PySide6.QtWidgets import QApplication, QWidget, QLineEdit, QPushButton, QVBoxLayout, QLabel, QDialog

class LoginApp(QWidget):
    def __init__(self):
        super().__init__()

        # Crearea interfeței
        self.initUI()

        # Conectare la baza de date MariaDB
        try:
            self.conn = mariadb.connect(
                user="root",        # Utilizatorul pentru conectarea la MariaDB
                password="database",    # Parola utilizatorului
                host="127.0.0.1",       # Adresa serverului MariaDB (localhost dacă este pe același dispozitiv)
                database="users"        # Numele bazei de date
            )
            self.c = self.conn.cursor()
            self.create_table()
        except mariadb.Error as e:
            print(f"Error connecting to MariaDB: {e}")
            sys.exit(1)

    def initUI(self):
        # Layout-ul interfeței
        layout = QVBoxLayout()

        # Username
        self.username_line_edit = QLineEdit(self)
        self.username_line_edit.setPlaceholderText("Username")
        layout.addWidget(self.username_line_edit)

        # Password
        self.password_line_edit = QLineEdit(self)
        self.password_line_edit.setPlaceholderText("Password")
        self.password_line_edit.setEchoMode(QLineEdit.Password)
        layout.addWidget(self.password_line_edit)

        # Login button
        self.login_button = QPushButton("Login", self)
        self.login_button.clicked.connect(self.handle_login)
        layout.addWidget(self.login_button)

        # Register button
        self.register_button = QPushButton("Register", self)
        self.register_button.clicked.connect(self.open_register_dialog)
        layout.addWidget(self.register_button)

        # Status label
        self.status_label = QLabel("", self)
        layout.addWidget(self.status_label)

        self.setLayout(layout)
        self.setWindowTitle("Login Application")

    def create_table(self):
        self.c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INT PRIMARY KEY AUTO_INCREMENT,
            username VARCHAR(255) NOT NULL,
            password VARCHAR(255) NOT NULL
        )
        ''')
        self.conn.commit()

    def hash_password(self, password):
        salt = bcrypt.gensalt()
        return bcrypt.hashpw(password.encode('utf-8'), salt)

    def check_password(self, stored_password, provided_password):
        return bcrypt.checkpw(provided_password.encode('utf-8'), stored_password)

    def handle_login(self):
        username = self.username_line_edit.text()
        password = self.password_line_edit.text()

        self.c.execute('SELECT password FROM users WHERE username=%s', (username,))
        result = self.c.fetchone()

        if result and self.check_password(result[0].encode('utf-8'), password):
            self.status_label.setText("Login successful!")
            self.launch_application(username)
        else:
            self.status_label.setText("Username or password incorrect")

    def open_register_dialog(self):
        register_dialog = RegisterDialog(self)
        register_dialog.exec_()

    def launch_application(self, username):
        if username == "Deadlyshadow18":
            print("Launching admin application...")
            os.system("python3 /home/cm4/app_calc.py")
        elif username == "user":
            print("Launching user application...")
            # os.system("python3 /path/to/user_app.py")
        else:
            print("No application associated with this user.")

    def closeEvent(self, event):
        self.conn.close()


class RegisterDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)

        self.setWindowTitle("Register New User")

        layout = QVBoxLayout()

        # Username
        self.username_line_edit = QLineEdit(self)
        self.username_line_edit.setPlaceholderText("Username")
        layout.addWidget(self.username_line_edit)

        # Password
        self.password_line_edit = QLineEdit(self)
        self.password_line_edit.setPlaceholderText("Password")
        self.password_line_edit.setEchoMode(QLineEdit.Password)
        layout.addWidget(self.password_line_edit)

        # Confirm Password
        self.confirm_password_line_edit = QLineEdit(self)
        self.confirm_password_line_edit.setPlaceholderText("Confirm Password")
        self.confirm_password_line_edit.setEchoMode(QLineEdit.Password)
        layout.addWidget(self.confirm_password_line_edit)

        # Register button
        self.register_button = QPushButton("Register", self)
        self.register_button.clicked.connect(self.handle_register)
        layout.addWidget(self.register_button)

        # Status label
        self.status_label = QLabel("", self)
        layout.addWidget(self.status_label)

        self.setLayout(layout)

    def handle_register(self):
        username = self.username_line_edit.text()
        password = self.password_line_edit.text()
        confirm_password = self.confirm_password_line_edit.text()

        # Verificăm dacă username-ul este deja în uz
        self.parent().c.execute('SELECT username FROM users WHERE username=%s', (username,))
        if self.parent().c.fetchone():
            self.status_label.setText("Username already taken.")
            return

        # Verificăm dacă parolele introduse se potrivesc
        if password != confirm_password:
            self.status_label.setText("Passwords do not match.")
            return

        # Hash-uirea parolei și adăugarea utilizatorului în baza de date
        hashed_password = self.parent().hash_password(password)
        try:
            self.parent().c.execute('INSERT INTO users (username, password) VALUES (%s, %s)', 
                                    (username, hashed_password.decode('utf-8')))
            self.parent().conn.commit()
            self.status_label.setText("User registered successfully.")
        except mariadb.Error as e:
            self.status_label.setText(f"Error: {e}")



if __name__ == "__main__":
    app = QApplication(sys.argv)
    login_app = LoginApp()
    login_app.show()
    sys.exit(app.exec())
