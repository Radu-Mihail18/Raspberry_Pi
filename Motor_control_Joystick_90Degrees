import time
from smbus2 import SMBus
import RPi.GPIO as GPIO

# Adresa I2C a MCP3426
MCP3426_I2C_ADDRESS = 0x6c

# Pini de control pentru driver-ul motorului pas cu pas
DIR_PIN = 17
STEP_PIN = 27
BUTTON_PIN = 22

# Configurarea GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(DIR_PIN, GPIO.OUT)
GPIO.setup(STEP_PIN, GPIO.OUT)
GPIO.setup(BUTTON_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Functie pentru a crea configuratia registrului
def create_config(channel=0, mode=1, resolution=0, gain=0):
    config = (mode << 4) | (channel << 5) | (resolution << 2) | gain
    return config

# Initializeaza I2C
bus = SMBus(1)

def read_adc(config):
    # Trimite configuratia catre MCP3426
    bus.write_byte(MCP3426_I2C_ADDRESS, config)
    time.sleep(0.01)

    # Citeste 2 octeti de la MCP3426 pentru rezolutie de 12 bi?i
    data = bus.read_i2c_block_data(MCP3426_I2C_ADDRESS, 0, 2)

    # Conversia datelor
    raw_adc = (data[0] & 0x0F) * 256 + data[1]

    time.sleep(0.1)
    return raw_adc

# Configura?ii pentru cele doua canale ale joystick-ului
config_x = create_config(channel=0, mode=1, resolution=0, gain=0)
config_y = create_config(channel=1, mode=1, resolution=0, gain=0)

# Setari pentru motor
steps_per_revolution = 800  # Pasi pentru 360 de grade
degrees_to_steps = steps_per_revolution / 360  # Pasi pentru 1 grad

# Calcul pa?i pentru 90 de grade
steps_for_90_degrees = int(degrees_to_steps * 90)  # 90 de grade

min_position = 739 - steps_for_90_degrees  # Limita minima
max_position = 739 + steps_for_90_degrees  # Limita maxima
center_position = 739  # Pozitia de mijloc
current_position = center_position  # Start din mijloc

# Functie pentru controlul motorului
def move_motor(target_position):
    global current_position

    # Ajustare pentru limitarea miscarii
    if target_position < min_position:
        target_position = min_position
    elif target_position > max_position:
        target_position = max_position

    steps_to_move = abs(target_position - current_position)
    direction = GPIO.HIGH if target_position > current_position else GPIO.LOW
    GPIO.output(DIR_PIN, direction)

    for _ in range(steps_to_move):
        if (current_position >= max_position and direction == GPIO.HIGH) or (cu>
            print("Atingere limita, oprire motor.")
            GPIO.output(STEP_PIN, GPIO.LOW)
            return

        GPIO.output(STEP_PIN, GPIO.HIGH)
        time.sleep(0.001)
        GPIO.output(STEP_PIN, GPIO.LOW)
        time.sleep(0.001)
        current_position += 1 if direction == GPIO.HIGH else -1

    GPIO.output(STEP_PIN, GPIO.LOW)
    print(f"Ajuns la pozitia dorita: {current_position}")

def move_to_center():
    global current_position
    if current_position == center_position:
        print("Motorul este deja in mijloc")
        return
    print(f"Mutare spre pozitia de mijloc... Current Position: {current_positio>
    move_motor(center_position)
    print("Ajuns la pozi?ia de mijloc. Oprire motor.")

try:
    while True:
        # Citeste valorile pentru axa X si axa Y
        x_value = read_adc(config_x)
        y_value = read_adc(config_y)

        button_pressed = not GPIO.input(BUTTON_PIN)

        if button_pressed:
            move_to_center()
        else:
            if abs(x_value - current_position) > 10:  # Threshold pentru a evit>
                # Ajustam valoarea joystickului pentru a fi intre limitele spec>
                x_value = max(min(x_value, max_position), min_position)
                move_motor(x_value)
            else:
                print(f"Joystick Value: {x_value}, Current Position: {current_p>
                time.sleep(0.1)

except KeyboardInterrupt:
    GPIO.cleanup()
